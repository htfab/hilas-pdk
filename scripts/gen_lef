#! /usr/bin/env python3

import argparse
import os
import re
from pexpect.replwrap import REPLWrapper

from subprocess import run
from pathlib import Path, PurePath

# first argument is path to magic files
# second arg.    is path to write LEF output


def edie(msg, code=1):
    print(msg)
    exit(code)


def newmagic():
    try:
        return REPLWrapper('magic -dnull -noconsole -rcfile "{}" -T "{}"'.format(
            os.getenv('MAGICRC'), os.getenv('TECHFILE')),
            orig_prompt='%', prompt_change=None)
    except:
        edie('couldn\'t start Magic')


def do_it(source_file, magic):
    if not magic.child.isalive():
        magic = newmagic()
    result = ''
    result += magic.run_command('load "{}" -force'.format(source_file))
    result += magic.run_command('lef write -hide')
    # magic.run_command('quit -noprompt')
    return magic, result


def main():
    ap = argparse.ArgumentParser()
    ap.add_argument('--compile', '-c', action='store_true', default=False,
                    help='Assemble individual LEF files into one master LEF file')
    ap.add_argument('--delete', '-d', action='store_true', default=False,
                    help='Remove individual LEF files after compilation. Not meaningful without -c option')
    ap.add_argument('mag_src', help='Path to directory containing Magic cell source files')
    ap.add_argument('target', help='File (with -c) or directory (without -c) in which to put LEF info')

    args = ap.parse_args()

    src_dir = Path(args.mag_src)
    targ_file = Path(args.target)

    try:
        assert src_dir.is_dir()
    except AssertionError:
        edie('source path should be a directory containing .mag Magic files')

    source_files = list(src_dir.glob('*.mag'))

    try:
        assert source_files is not None
    except AssertionError:
        edie('didn\'t find any *.mag files on the source path')

    if args.compile:
        try:
            assert not targ_file.is_dir()
            assert targ_file.suffix == '.lef'
        except AssertionError:
            edie('when compiling using \'-c\', target argument should be a full path to a file ending in \'.lef\'')
    else:
        try:
            assert targ_file.is_dir()
        except AssertionError:
            edie('when not compiling using \'-c\', target argument should be a path to put all \'*.lef\' files.')

    try:
        assert targ_file.parent.is_dir()
    except AssertionError:
        edie('target file parent does not exist')

    try:
        with open(targ_file, 'w') as f:
            f.write('')
        os.remove(targ_file)
    except:
        edie('problem writing to destination dir')

    os.chdir(targ_file.parent)
    successes = [True]*len(source_files)

    magic = newmagic()

    for i, f in enumerate(source_files):
        try:
            print("Generating LEF from: {}".format(f))
            magic, result = do_it(f, magic)

        except BaseException:
            print("[ERROR] There was a problem during the processing of {}:".format(f))
            print(result)
            successes[i] = False

        if not magic.child.isalive():
            print("[ERROR] There was a problem during the processing of {}: ".format(f))
            print(result)
            successes[i] = False

    if args.compile:
        example_ = Path(source_files[successes.index(True)]).name.replace('.mag', '.lef')
        with open(example_, 'r') as f:
            ef = f.read()

        header = re.findall(r'[\S\s\n]*(?=MACRO)', ef)[0]

        blocks = []
        for sf in Path('.').glob('*.lef'):
            try:
                with open(sf, 'r') as f:
                    st = f.read()
                cn = sf.stem
                blocks.append(
                    re.search(r'(MACRO\s+{}[\s\S\n]*?\n\s*END\s+{})'.format(re.escape(cn), re.escape(cn)), st).group()
                )
            except:
                pass
            if args.delete:
                os.remove(sf)
                print('removed individual LEF at {}'.format(sf))

        tot_file = header + '\n\n'.join(blocks+['END LIBRARY'])

        with open(targ_file, 'w') as f:
            f.write(tot_file)
        print('wrote compiled LEF at {}'.format(targ_file))


if __name__ == '__main__':
    exit(main())
