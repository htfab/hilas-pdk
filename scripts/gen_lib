#! /usr/bin/env python3

import sys
import re
import os
import argparse

import jinja2
from pathlib import Path

this_dir = Path(__file__).parent
# STD_CELLS_PATH = this_dir / '..' / '..' / 'magic'
# TARGET_LIB_PATH = this_dir/'..'/'hilas.lib'
CELL_TEMPLATE = 'min_inverter.template.lib'
LIB_TEMPLATE = 'head.template.lib'
PG_PIN_NAMES = ['VPB', 'VPWRIN', 'LOWLVPWR', 'VGND', 'VPWR', 'VNB', 'KAPWR']


def edie(message, code=1):
    print(message)
    sys.exit(code)


# def read_pg_pin(lineno, text):
#     fake=True


def read_pin(pin_name, text_block):
    res = {}
    res.update({'name': pin_name.strip()})

    for line in text_block.split('\n'):
        if 'DIRECTION ' in line:
            res.update({'direction': line.split('DIRECTION')[1].strip().rstrip(';')})
        elif 'USE ' in line:
            res.update({'use': line.split('USE')[1].strip().rstrip(';')})
        elif 'ANTENNAGATEAREA' in line:
            res.update({'antenna_gate_area': line.split('ANTENNAGATEAREA')[1].strip().rstrip(';')})

    return res


def read_cell_info(cell_name, lef_path):

    if isinstance(lef_path, Path):

        if lef_path.is_dir():
            # treat it as the directory containing the desired LEF file
            try:
                with open(lef_path / (cell_name+'.lef'), 'r') as f:
                    cc = f.read()
            except:
                edie('no file named {}'.format(lef_path / (cell_name+'.lef')))

        elif lef_path.is_file():
            with open(lef_path, 'r') as f:
                cc = f.read()

    elif isinstance(lef_path, str):
        # treat it as the contents of a single LEF file
        cc = lef_path

    pi = []

    for pinfo in re.findall(r'(^\s*PIN\s+(?P<name>\S*)\n(?:.*\n)*?\s*END\s+\2)', cc, re.MULTILINE):
        # found a pin
        pi.append(read_pin(pinfo[1], pinfo[0]))
        # elif re.match('^\s*pg_pin \("(.*)"\)', line):
        #     # found a pg_pin
        #     pi.append(read_pg_pin(cc, i))
    return pi


def main():
    ap = argparse.ArgumentParser(description='Generates a *.lib file given cells in *.mag format')
    ap.add_argument('LEF_dir', help="Path to LEF source file directory")
    ap.add_argument('output', help='Path/name of the generated Liberty file')
    args = ap.parse_args()

    try:
        lef_path = Path(args.LEF_dir)
        assert lef_path.is_dir() or lef_path.is_file()
    except AssertionError:
        edie('Bad LEF source path')

    dest_file = Path(args.output)
    if not dest_file.parent.is_dir():
        os.makedirs(dest_file.parent, exist_ok=True)
    try:
        with open(dest_file, 'w') as f:
            f.write('')
    except:
        edie('could not write to destination')

    print('gen_lib deriving info from LEF file(s) at {}'.format(lef_path))

    if lef_path.is_dir():
        lef_files = list(lef_path.glob('*.lef'))
    elif lef_path.is_file():
        lef_files = [lef_path]

    cell_names = {}
    for lf in lef_files:
        with open(lf, 'r') as f:
            cc = f.read()
        cell_names.update({lf: re.findall(r'\n\s*MACRO\s+(\S+)', cc)})

    template_loader = jinja2.FileSystemLoader(this_dir)
    template_env = jinja2.Environment(
        trim_blocks=True,
        lstrip_blocks=True,
        loader=template_loader,
        autoescape=jinja2.select_autoescape(
            disabled_extensions=('.lib',),
            default_for_string=True,
            default=True,
        ))

    lib_template = template_env.get_template(str(LIB_TEMPLATE))
    cell_template = template_env.get_template(str(CELL_TEMPLATE))

    cell_block = []

    for file, macros in cell_names.items():

        for cn in macros:
            print('reading cell info: {}'.format(cn))

            pins = read_cell_info(cn, file)

            pg_pins = [p for p in pins if p['name'] in PG_PIN_NAMES]
            pins = [p for p in pins if p['name'] not in PG_PIN_NAMES]

            for pgp in pg_pins:
                pgp.update({
                    'pg_type': 'primary_ground' if pgp['name'] == 'VGND' else 'primary_power',
                    'related_bias_pin': 'VPB' if pgp['name'] == 'VGND' else 'VNB',
                    'voltage_name': pgp['name'],
                })

            pg_pins.append({
                'name': "VNB",
                'pg_type': "nwell",
                'physical_connection': "device_layer",
                'voltage_name': "VNB",
            })

            pg_pins.append({
                'name': "VPB",
                'pg_type': "pwell",
                'physical_connection': "device_layer",
                'voltage_name': "VPB",
            })

            for p in pins:
                #output pins:
                    # max_capacitance: 0.1300150000;
                    # max_transition: 1.5061030000;
                #input pins:
                    # capacitance: 0.0021030000;
                    # fall_capacitance: 0.0020150000;
                    # max_transition: 1.5000000000;
                p.update({
                    'isclock': 'false',
                    'direction': 'inout',
                    'is_analog': 'true',
                    'function': None,
                    'capacitance': 0.0021030000,
                    'max_transition': 1.5061030000,
                    'related_ground_pin': 'VGND',
                    'related_power_pin': 'VPWR'
                })

            cell_block.append(cell_template.render(
                cell_name=cn,
                leakage_power=None,
                area=None,
                cell_leakage_power=None,
                pg_pins=pg_pins,
                pins=pins,
            ))
            print('appended LIB info for {}'.format(cn))

    result = lib_template.render(cells='\n\n'.join(cell_block))
    with open(dest_file, 'w') as f:
        f.write(result)
    print('wrote LIB file to {}'.format(dest_file))


if __name__ == '__main__':
    sys.exit(main())